{
	"name": "02-Parent",
	"properties": {
		"description": "ADF.procfwk parent pipeline used to bootstrap the orchestration framework in perform the first level ForEach calls in sequence for the metadata stages.",
		"activities": [
			{
				"name": "Get Stages",
				"description": "Returns a distinct list of execution stages within the framework metadata.",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Execution Wrapper",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[procfwk].[GetStages]",
						"storedProcedureParameters": {
							"ExecutionId": {
								"type": "Guid",
								"value": {
									"value": "@activity('Execution Wrapper').output.firstRow.ExecutionId",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "GetSetMetadata",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Execute Stages",
				"description": "Top level ForEach to sequentially call all processing stages within the framework metadata. Items for iteration passed from the Get Stages lookup activity.",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get Stages",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Get Tenant Id",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Get Subscription Id",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Stages').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Stage Executor",
							"description": "Call to the framework generic child pipeline for a given execution stage.",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Log Stage Preparing",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "03-Child",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"StageId": {
										"value": "@item().StageId",
										"type": "Expression"
									},
									"ExecutionId": {
										"value": "@activity('Execution Wrapper').output.firstRow.ExecutionId",
										"type": "Expression"
									},
									"TenantId": {
										"value": "@activity('Get Tenant Id').output.firstRow.PropertyValue",
										"type": "Expression"
									},
									"SubscriptionId": {
										"value": "@activity('Get Subscription Id').output.firstRow.PropertyValue",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Log Stage Preparing",
							"description": "Update the current execution table flagging all pipelines within the stage as preparing.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Check for Blockers",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[procfwk].[SetLogStagePreparing]",
								"storedProcedureParameters": {
									"ExecutionId": {
										"value": {
											"value": "@activity('Execution Wrapper').output.firstRow.ExecutionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"StageId": {
										"value": {
											"value": "@item().StageId",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "SupportDatabase",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Check for Blockers",
							"description": "Used to double check and stop the next execution stage if failures and blockers have be incurred. Without this step processing would continue regardless of upstream failures.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[procfwk].[CheckForBlockedPipelines]",
								"storedProcedureParameters": {
									"StageId": {
										"value": {
											"value": "@item().StageId",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "SupportDatabase",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "Execution Wrapper",
				"description": "Wrapper to reset and restart processing or create a completely new execution instance of the framework metadata.",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Metadata Integrity Checks",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[procfwk].[ExecutionWrapper]",
						"storedProcedureParameters": {
							"CallingDataFactory": {
								"type": "String",
								"value": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "GetSetMetadata",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Archive Execution Log",
				"description": "After a successful execution run the current execution metadata is moved to the long term logging table by this stored procedure call.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Execute Stages",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[procfwk].[UpdateExecutionLog]"
				},
				"linkedServiceName": {
					"referenceName": "SupportDatabase",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Get Tenant Id",
				"description": "Returning the Azure Tenant Id from the metadata properties table.",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Metadata Integrity Checks",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[procfwk].[GetPropertyValue]",
						"storedProcedureParameters": {
							"PropertyName": {
								"type": "String",
								"value": "TenantId"
							}
						},
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "GetSetMetadata",
						"type": "DatasetReference"
					},
					"firstRowOnly": true
				}
			},
			{
				"name": "Get Subscription Id",
				"description": "Returning the Azure Subscription Id from the metadata properties table.",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Metadata Integrity Checks",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[procfwk].[GetPropertyValue]",
						"storedProcedureParameters": {
							"PropertyName": {
								"type": "String",
								"value": "SubscriptionId"
							}
						},
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "GetSetMetadata",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Metadata Integrity Checks",
				"description": "Performs a series of checks on all metadata held in the framework SQLDB. This is intended to raise errors before an execution run even starts.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[procfwk].[CheckMetadataIntegrity]",
					"storedProcedureParameters": {
						"DebugMode": {
							"value": "false",
							"type": "Boolean"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "SupportDatabase",
					"type": "LinkedServiceReference"
				}
			}
		],
		"folder": {
			"name": "_ProcFwk"
		},
		"annotations": [
			"ADF.procfwk"
		]
	}
}